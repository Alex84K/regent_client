import React, { useEffect, useState } from "react"
import {
  Button,
  Box,
  Typography,
  Modal,
  TextField,
  MenuItem,
} from "@mui/material"
import { themesCompositions } from "../repertuar/repertuarThemes"
import {
  addCompositionInWork,
  fetchCompositionAll,
  fetchCompositionByTheme,
} from "../../features/composition/compositionApi"
import {
  AddCompositionInWorkDto,
  Composition,
} from "../../features/composition/types"
import { useAppDispatch, useAppSelector } from "../../app/hooks"
import {
  addNewComposition,
  getCompositionById,
  selectComposition,
  selectCompositionsList,
} from "../../features/composition/compositionSlice"
import { compositionSorted } from "../../utils/utils"
import { NewEventPlan } from "../../features/events_feature/type"
import {
  addNewEvent,
  getAllEvents,
} from "../../features/events_feature/eventPlanSlice"

interface Props {
  open: boolean
  setOpen: React.Dispatch<React.SetStateAction<boolean>>
  selectedStart: string
  selectedEnd: string
  calendarApi: any // üëà –ü–æ–ª—É—á–∞–µ–º API –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ CalendarApp
}

export const style = {
  bgcolor: "background.paper",
  boxShadow: 24,
  p: 4,
  maxHeight: "80vh", // üîπ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –º–æ–¥–∞–ª–∫–∏
  overflowY: "auto", // üîπ –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É, –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç –≤—ã—Ö–æ–¥–∏—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã
  borderRadius: "10px", // üîπ –î–æ–±–∞–≤–∏–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ —É–≥–ª–æ–≤ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
}

const ModalAddCompositionInCalendar: React.FC<Props> = ({
  open,
  setOpen,
  selectedStart,
  selectedEnd,
  calendarApi,
}) => {
  const [title, setTitle] = useState("") // üëà –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è
  const [filterCompositions, setFilterCompositions] = useState<Composition[]>(
    [],
  )
  const [filteredCompositions, setFilteredCompositions] = useState<
    Composition[]
  >([]) // üëà –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π
  const [searchQuery, setSearchQuery] = useState("") // üëà –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  const [nameRegent, setNameNameRegent] = useState("")
  const [nameCompositions, setNameCompositions] = useState("")
  const [compositions, setCompositions] = useState<Composition[]>([])
  const composition = useAppSelector(selectComposition)
  const dispatch = useAppDispatch()

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–ø–æ–∑–∏—Ü–∏–π –ø–æ —Ç–µ–º–µ
  const getCompositions = (selectedValue: string) => {
    console.log(selectedValue)

    setNameCompositions(selectedValue)

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ `/` –∏ `-`, —Ç–∞–∫ –∫–∞–∫ –≤ –≤—ã–ø–∞–¥–∞—é—â–µ–º —Å–ø–∏—Å–∫–µ —Ñ–æ—Ä–º–∞—Ç "name/book-number"
    const [namePart, bookAndNumber] = selectedValue.split("/")
    const [bookPart, numberPart] = bookAndNumber?.split("-") || []

    // –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –ø–æ –≤—Å–µ–º —Ç—Ä–µ–º –ø–æ–ª—è–º
    const selectedComposition = filterCompositions.find(
      comp =>
        comp.name === namePart.trim() &&
        comp.book === bookPart?.trim() &&
        comp.number === numberPart?.trim(),
    )

    if (selectedComposition) {
      dispatch(getCompositionById(selectedComposition.id))
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const handleAddEvent = () => {
    const newTitle = `${nameCompositions}/${nameRegent}`

    if (!newTitle.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è!")
      return
    }
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º selectedStart –≤ Date —Å –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º)
    const dateString = selectedStart // "2025-03-28"
    const dateObj = new Date(dateString) // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Date

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ ISO —Å—Ç—Ä–æ–∫—É —Å –≤—Ä–µ–º–µ–Ω–µ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, "2025-03-28T16:26:40.887+00:00")
    const isoStringWithTime = dateObj.toISOString() // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –∏ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

    setTitle(newTitle) // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º title –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    const newEventDto: NewEventPlan = {
      title: composition.name,
      book: composition.book,
      number: composition.number,
      regent: nameRegent,
      start: dateObj,
    }

    const newInWorkDto: AddCompositionInWorkDto = {
      id: composition.id,
      lastDirigent: nameRegent,
    }
    
    dispatch(addNewEvent(newEventDto)).then(() => {
      addCompositionInWork(newInWorkDto)
      dispatch(getAllEvents()) // üî• –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π
    })

    setOpen(false) // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setTitle("") // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
  }

  // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–ø–æ–∑–∏—Ü–∏–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    fetchCompositionAll().then(data => setCompositions(data))

    setFilterCompositions(compositionSorted(compositions))
    setFilteredCompositions(compositionSorted(compositions)) // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏
  }, [compositions, dispatch])

  return (
    <Modal open={open} onClose={() => setOpen(false)}>
      <Box sx={style} className="col-lg-6 mx-auto mt-5 border rounded p-4">
        <Typography variant="h6">–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ</Typography>
        <Typography sx={{ mt: 2 }}>
          –î–∞—Ç–∞: {selectedStart} - {selectedEnd}
        </Typography>

        {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è */}
        <TextField
          fullWidth
          label="Regent name"
          variant="outlined"
          value={nameRegent}
          onChange={e => setNameNameRegent(e.target.value)}
          sx={{ mt: 2 }}
        />

        <div className=" mt-2">
          <TextField
            id="outlined-select-currency"
            select
            label="Composition name"
            helperText="Please select your currency"
            className="w-100"
            onChange={e => {
              getCompositions(e.target.value)
            }}
          >
            {filterCompositions.map((t, i) => (
              // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π key
              <MenuItem
                key={`${t.id}`}
                value={`${t.name}/${t.book}-${t.number}`}
              >
                {t.name}/{t.book}-{t.number}
              </MenuItem>
            ))}
          </TextField>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ */}
        <Box sx={{ display: "flex", justifyContent: "flex-end", mt: 3 }}>
          <Button variant="contained" color="primary" onClick={handleAddEvent}>
            –î–æ–±–∞–≤–∏—Ç—å
          </Button>
        </Box>
      </Box>
    </Modal>
  )
}

export default ModalAddCompositionInCalendar
